
RC2_DDaMCPU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000008e8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000a70  08000a70  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  08000a70  08000a70  00010a70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08000a74  08000a74  00010a74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000000c  20000000  08000a78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
  7 .bss          00002420  2000000c  2000000c  0002000c  2**2
                  ALLOC
  8 ._user_heap_stack 00000200  2000242c  2000242c  0002000c  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 10 .debug_info   00003d5e  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00000b47  00000000  00000000  00023d9a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000002a8  00000000  00000000  000248e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000230  00000000  00000000  00024b90  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000121f  00000000  00000000  00024dc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0000112a  00000000  00000000  00025fdf  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00027109  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00000808  00000000  00000000  00027188  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      0000003f  00000000  00000000  00027990  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000a58 	.word	0x08000a58

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08000a58 	.word	0x08000a58

080001c8 <HAL_IncTick>:
  *         The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80001c8:	b480      	push	{r7}
 80001ca:	af00      	add	r7, sp, #0
  uwTick++;
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <HAL_IncTick+0x18>)
 80001ce:	681b      	ldr	r3, [r3, #0]
 80001d0:	3301      	adds	r3, #1
 80001d2:	4a03      	ldr	r2, [pc, #12]	; (80001e0 <HAL_IncTick+0x18>)
 80001d4:	6013      	str	r3, [r2, #0]
}
 80001d6:	bf00      	nop
 80001d8:	46bd      	mov	sp, r7
 80001da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001de:	4770      	bx	lr
 80001e0:	20000028 	.word	0x20000028

080001e4 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80001e4:	b480      	push	{r7}
 80001e6:	b083      	sub	sp, #12
 80001e8:	af00      	add	r7, sp, #0
 80001ea:	4603      	mov	r3, r0
 80001ec:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 80001ee:	4909      	ldr	r1, [pc, #36]	; (8000214 <NVIC_EnableIRQ+0x30>)
 80001f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001f4:	095b      	lsrs	r3, r3, #5
 80001f6:	79fa      	ldrb	r2, [r7, #7]
 80001f8:	f002 021f 	and.w	r2, r2, #31
 80001fc:	2001      	movs	r0, #1
 80001fe:	fa00 f202 	lsl.w	r2, r0, r2
 8000202:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000206:	bf00      	nop
 8000208:	370c      	adds	r7, #12
 800020a:	46bd      	mov	sp, r7
 800020c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000210:	4770      	bx	lr
 8000212:	bf00      	nop
 8000214:	e000e100 	.word	0xe000e100

08000218 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000218:	b480      	push	{r7}
 800021a:	b083      	sub	sp, #12
 800021c:	af00      	add	r7, sp, #0
 800021e:	4603      	mov	r3, r0
 8000220:	6039      	str	r1, [r7, #0]
 8000222:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 8000224:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000228:	2b00      	cmp	r3, #0
 800022a:	da0b      	bge.n	8000244 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 800022c:	490d      	ldr	r1, [pc, #52]	; (8000264 <NVIC_SetPriority+0x4c>)
 800022e:	79fb      	ldrb	r3, [r7, #7]
 8000230:	f003 030f 	and.w	r3, r3, #15
 8000234:	3b04      	subs	r3, #4
 8000236:	683a      	ldr	r2, [r7, #0]
 8000238:	b2d2      	uxtb	r2, r2
 800023a:	0112      	lsls	r2, r2, #4
 800023c:	b2d2      	uxtb	r2, r2
 800023e:	440b      	add	r3, r1
 8000240:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
 8000242:	e009      	b.n	8000258 <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8000244:	4908      	ldr	r1, [pc, #32]	; (8000268 <NVIC_SetPriority+0x50>)
 8000246:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800024a:	683a      	ldr	r2, [r7, #0]
 800024c:	b2d2      	uxtb	r2, r2
 800024e:	0112      	lsls	r2, r2, #4
 8000250:	b2d2      	uxtb	r2, r2
 8000252:	440b      	add	r3, r1
 8000254:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000258:	bf00      	nop
 800025a:	370c      	adds	r7, #12
 800025c:	46bd      	mov	sp, r7
 800025e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000262:	4770      	bx	lr
 8000264:	e000ed00 	.word	0xe000ed00
 8000268:	e000e100 	.word	0xe000e100

0800026c <delay>:
#include "adc.h"

uint16_t adc1_channel_select = 0x00;

void delay(int time){
 800026c:	b480      	push	{r7}
 800026e:	b085      	sub	sp, #20
 8000270:	af00      	add	r7, sp, #0
 8000272:	6078      	str	r0, [r7, #4]
	for(int i=0; i < time; i++);
 8000274:	2300      	movs	r3, #0
 8000276:	60fb      	str	r3, [r7, #12]
 8000278:	e002      	b.n	8000280 <delay+0x14>
 800027a:	68fb      	ldr	r3, [r7, #12]
 800027c:	3301      	adds	r3, #1
 800027e:	60fb      	str	r3, [r7, #12]
 8000280:	68fa      	ldr	r2, [r7, #12]
 8000282:	687b      	ldr	r3, [r7, #4]
 8000284:	429a      	cmp	r2, r3
 8000286:	dbf8      	blt.n	800027a <delay+0xe>
}
 8000288:	bf00      	nop
 800028a:	3714      	adds	r7, #20
 800028c:	46bd      	mov	sp, r7
 800028e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000292:	4770      	bx	lr

08000294 <adc_calibrate_single>:

void adc_calibrate_single(){
 8000294:	b580      	push	{r7, lr}
 8000296:	af00      	add	r7, sp, #0

	if (ADC1->CR & ADC_CR_ADEN) {
 8000298:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800029c:	689b      	ldr	r3, [r3, #8]
 800029e:	f003 0301 	and.w	r3, r3, #1
 80002a2:	2b00      	cmp	r3, #0
 80002a4:	d00f      	beq.n	80002c6 <adc_calibrate_single+0x32>
	        ADC1->CR |= ADC_CR_ADDIS;
 80002a6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80002aa:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80002ae:	689b      	ldr	r3, [r3, #8]
 80002b0:	f043 0302 	orr.w	r3, r3, #2
 80002b4:	6093      	str	r3, [r2, #8]
	        while (ADC1->CR & ADC_CR_ADEN);
 80002b6:	bf00      	nop
 80002b8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80002bc:	689b      	ldr	r3, [r3, #8]
 80002be:	f003 0301 	and.w	r3, r3, #1
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	d1f8      	bne.n	80002b8 <adc_calibrate_single+0x24>
	 }

	ADC1->CR |= ADC_CR_ADCAL;
 80002c6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80002ca:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80002ce:	689b      	ldr	r3, [r3, #8]
 80002d0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80002d4:	6093      	str	r3, [r2, #8]
	delay(100);
 80002d6:	2064      	movs	r0, #100	; 0x64
 80002d8:	f7ff ffc8 	bl	800026c <delay>
}
 80002dc:	bf00      	nop
 80002de:	bd80      	pop	{r7, pc}

080002e0 <ADVREGEN_ON>:
	delay(100);
	ADC1->CR |= ADC_CR_ADVREGEN_1;

}

void ADVREGEN_ON(){
 80002e0:	b580      	push	{r7, lr}
 80002e2:	af00      	add	r7, sp, #0
	ADC1->CR &= ~ADC_CR_ADVREGEN;
 80002e4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80002e8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80002ec:	689b      	ldr	r3, [r3, #8]
 80002ee:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80002f2:	6093      	str	r3, [r2, #8]
	delay(100);
 80002f4:	2064      	movs	r0, #100	; 0x64
 80002f6:	f7ff ffb9 	bl	800026c <delay>
	ADC1->CR |= ADC_CR_ADVREGEN_0;
 80002fa:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80002fe:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000302:	689b      	ldr	r3, [r3, #8]
 8000304:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000308:	6093      	str	r3, [r2, #8]
}
 800030a:	bf00      	nop
 800030c:	bd80      	pop	{r7, pc}
	...

08000310 <adc_init>:

void adc_init(){
 8000310:	b580      	push	{r7, lr}
 8000312:	af00      	add	r7, sp, #0

	RCC->AHBENR |= RCC_AHBENR_ADC12EN;
 8000314:	4a2d      	ldr	r2, [pc, #180]	; (80003cc <adc_init+0xbc>)
 8000316:	4b2d      	ldr	r3, [pc, #180]	; (80003cc <adc_init+0xbc>)
 8000318:	695b      	ldr	r3, [r3, #20]
 800031a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800031e:	6153      	str	r3, [r2, #20]
	ADC1_2_COMMON->CCR |= ADC12_CCR_CKMODE_1;
 8000320:	4a2b      	ldr	r2, [pc, #172]	; (80003d0 <adc_init+0xc0>)
 8000322:	4b2b      	ldr	r3, [pc, #172]	; (80003d0 <adc_init+0xc0>)
 8000324:	689b      	ldr	r3, [r3, #8]
 8000326:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800032a:	6093      	str	r3, [r2, #8]
	//RCC->CFGR2 |= RCC_CFGR2_ADCPRE12_DIV16;


	ADVREGEN_ON();
 800032c:	f7ff ffd8 	bl	80002e0 <ADVREGEN_ON>

	adc_calibrate_single();
 8000330:	f7ff ffb0 	bl	8000294 <adc_calibrate_single>

	ADC1->CFGR |= ADC_CFGR_CONT;
 8000334:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000338:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800033c:	68db      	ldr	r3, [r3, #12]
 800033e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000342:	60d3      	str	r3, [r2, #12]

	ADC1->SQR1  &= ~ADC_SQR1_L;
 8000344:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000348:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800034c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800034e:	f023 030f 	bic.w	r3, r3, #15
 8000352:	6313      	str	r3, [r2, #48]	; 0x30
	ADC1->SQR1 |= ADC_SQR1_SQ1_0;
 8000354:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000358:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800035c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800035e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000362:	6313      	str	r3, [r2, #48]	; 0x30

	ADC1->SMPR1 |= ADC_SMPR1_SMP1;
 8000364:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000368:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800036c:	695b      	ldr	r3, [r3, #20]
 800036e:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 8000372:	6153      	str	r3, [r2, #20]
	//ADC1->SMPR2 |= ADC_SMPR2_SMP16;
	//ADC1_2_COMMON->CCR |= ADC12_CCR_TSEN;
	NVIC_SetPriority(ADC1_2_IRQn, 0x01);
 8000374:	2101      	movs	r1, #1
 8000376:	2012      	movs	r0, #18
 8000378:	f7ff ff4e 	bl	8000218 <NVIC_SetPriority>
	NVIC_EnableIRQ(ADC1_2_IRQn);
 800037c:	2012      	movs	r0, #18
 800037e:	f7ff ff31 	bl	80001e4 <NVIC_EnableIRQ>

	ADC1->CFGR &= ~ADC_CFGR_RES;
 8000382:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000386:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800038a:	68db      	ldr	r3, [r3, #12]
 800038c:	f023 0318 	bic.w	r3, r3, #24
 8000390:	60d3      	str	r3, [r2, #12]

	ADC1->CFGR |= ADC_CFGR_DMAEN;
 8000392:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000396:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800039a:	68db      	ldr	r3, [r3, #12]
 800039c:	f043 0301 	orr.w	r3, r3, #1
 80003a0:	60d3      	str	r3, [r2, #12]

	ADC1->CR |= ADC_CR_ADEN;
 80003a2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80003a6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80003aa:	689b      	ldr	r3, [r3, #8]
 80003ac:	f043 0301 	orr.w	r3, r3, #1
 80003b0:	6093      	str	r3, [r2, #8]
	delay(100);
 80003b2:	2064      	movs	r0, #100	; 0x64
 80003b4:	f7ff ff5a 	bl	800026c <delay>
	ADC1->CR |= ADC_CR_ADSTART;
 80003b8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80003bc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80003c0:	689b      	ldr	r3, [r3, #8]
 80003c2:	f043 0304 	orr.w	r3, r3, #4
 80003c6:	6093      	str	r3, [r2, #8]
}
 80003c8:	bf00      	nop
 80003ca:	bd80      	pop	{r7, pc}
 80003cc:	40021000 	.word	0x40021000
 80003d0:	50000300 	.word	0x50000300

080003d4 <NVIC_EnableIRQ>:
{
 80003d4:	b480      	push	{r7}
 80003d6:	b083      	sub	sp, #12
 80003d8:	af00      	add	r7, sp, #0
 80003da:	4603      	mov	r3, r0
 80003dc:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 80003de:	4909      	ldr	r1, [pc, #36]	; (8000404 <NVIC_EnableIRQ+0x30>)
 80003e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003e4:	095b      	lsrs	r3, r3, #5
 80003e6:	79fa      	ldrb	r2, [r7, #7]
 80003e8:	f002 021f 	and.w	r2, r2, #31
 80003ec:	2001      	movs	r0, #1
 80003ee:	fa00 f202 	lsl.w	r2, r0, r2
 80003f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80003f6:	bf00      	nop
 80003f8:	370c      	adds	r7, #12
 80003fa:	46bd      	mov	sp, r7
 80003fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000400:	4770      	bx	lr
 8000402:	bf00      	nop
 8000404:	e000e100 	.word	0xe000e100

08000408 <NVIC_SetPriority>:
{
 8000408:	b480      	push	{r7}
 800040a:	b083      	sub	sp, #12
 800040c:	af00      	add	r7, sp, #0
 800040e:	4603      	mov	r3, r0
 8000410:	6039      	str	r1, [r7, #0]
 8000412:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 8000414:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000418:	2b00      	cmp	r3, #0
 800041a:	da0b      	bge.n	8000434 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 800041c:	490d      	ldr	r1, [pc, #52]	; (8000454 <NVIC_SetPriority+0x4c>)
 800041e:	79fb      	ldrb	r3, [r7, #7]
 8000420:	f003 030f 	and.w	r3, r3, #15
 8000424:	3b04      	subs	r3, #4
 8000426:	683a      	ldr	r2, [r7, #0]
 8000428:	b2d2      	uxtb	r2, r2
 800042a:	0112      	lsls	r2, r2, #4
 800042c:	b2d2      	uxtb	r2, r2
 800042e:	440b      	add	r3, r1
 8000430:	761a      	strb	r2, [r3, #24]
}
 8000432:	e009      	b.n	8000448 <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8000434:	4908      	ldr	r1, [pc, #32]	; (8000458 <NVIC_SetPriority+0x50>)
 8000436:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800043a:	683a      	ldr	r2, [r7, #0]
 800043c:	b2d2      	uxtb	r2, r2
 800043e:	0112      	lsls	r2, r2, #4
 8000440:	b2d2      	uxtb	r2, r2
 8000442:	440b      	add	r3, r1
 8000444:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000448:	bf00      	nop
 800044a:	370c      	adds	r7, #12
 800044c:	46bd      	mov	sp, r7
 800044e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000452:	4770      	bx	lr
 8000454:	e000ed00 	.word	0xe000ed00
 8000458:	e000e100 	.word	0xe000e100

0800045c <int2chr>:

 uint16_t len = 5;
 uint16_t adc1_for_dma[1024];
 char myString[1024*7];

void int2chr(uint16_t number, char* buff){
 800045c:	b480      	push	{r7}
 800045e:	b087      	sub	sp, #28
 8000460:	af00      	add	r7, sp, #0
 8000462:	4603      	mov	r3, r0
 8000464:	6039      	str	r1, [r7, #0]
 8000466:	80fb      	strh	r3, [r7, #6]
	uint16_t num = number;
 8000468:	88fb      	ldrh	r3, [r7, #6]
 800046a:	82fb      	strh	r3, [r7, #22]
	for(int i = 3; i > -1; i--){
 800046c:	2303      	movs	r3, #3
 800046e:	613b      	str	r3, [r7, #16]
 8000470:	e01c      	b.n	80004ac <int2chr+0x50>
		int a = num % 10;
 8000472:	8afa      	ldrh	r2, [r7, #22]
 8000474:	4b14      	ldr	r3, [pc, #80]	; (80004c8 <int2chr+0x6c>)
 8000476:	fba3 1302 	umull	r1, r3, r3, r2
 800047a:	08d9      	lsrs	r1, r3, #3
 800047c:	460b      	mov	r3, r1
 800047e:	009b      	lsls	r3, r3, #2
 8000480:	440b      	add	r3, r1
 8000482:	005b      	lsls	r3, r3, #1
 8000484:	1ad3      	subs	r3, r2, r3
 8000486:	b29b      	uxth	r3, r3
 8000488:	60fb      	str	r3, [r7, #12]
		buff[i] = a + '0';
 800048a:	693b      	ldr	r3, [r7, #16]
 800048c:	683a      	ldr	r2, [r7, #0]
 800048e:	4413      	add	r3, r2
 8000490:	68fa      	ldr	r2, [r7, #12]
 8000492:	b2d2      	uxtb	r2, r2
 8000494:	3230      	adds	r2, #48	; 0x30
 8000496:	b2d2      	uxtb	r2, r2
 8000498:	701a      	strb	r2, [r3, #0]
		num = num/10;
 800049a:	8afb      	ldrh	r3, [r7, #22]
 800049c:	4a0a      	ldr	r2, [pc, #40]	; (80004c8 <int2chr+0x6c>)
 800049e:	fba2 2303 	umull	r2, r3, r2, r3
 80004a2:	08db      	lsrs	r3, r3, #3
 80004a4:	82fb      	strh	r3, [r7, #22]
	for(int i = 3; i > -1; i--){
 80004a6:	693b      	ldr	r3, [r7, #16]
 80004a8:	3b01      	subs	r3, #1
 80004aa:	613b      	str	r3, [r7, #16]
 80004ac:	693b      	ldr	r3, [r7, #16]
 80004ae:	2b00      	cmp	r3, #0
 80004b0:	dadf      	bge.n	8000472 <int2chr+0x16>
	}
	buff[4] = ' ';
 80004b2:	683b      	ldr	r3, [r7, #0]
 80004b4:	3304      	adds	r3, #4
 80004b6:	2220      	movs	r2, #32
 80004b8:	701a      	strb	r2, [r3, #0]
}
 80004ba:	bf00      	nop
 80004bc:	371c      	adds	r7, #28
 80004be:	46bd      	mov	sp, r7
 80004c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop
 80004c8:	cccccccd 	.word	0xcccccccd

080004cc <convert_data2str>:

void convert_data2str(){
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b082      	sub	sp, #8
 80004d0:	af00      	add	r7, sp, #0
	for(uint32_t i = 0, j = 0; j < len; j++, i = i + 7){
 80004d2:	2300      	movs	r3, #0
 80004d4:	607b      	str	r3, [r7, #4]
 80004d6:	2300      	movs	r3, #0
 80004d8:	603b      	str	r3, [r7, #0]
 80004da:	e01a      	b.n	8000512 <convert_data2str+0x46>
		myString[i] = SYNC;
 80004dc:	4a12      	ldr	r2, [pc, #72]	; (8000528 <convert_data2str+0x5c>)
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	4413      	add	r3, r2
 80004e2:	22ee      	movs	r2, #238	; 0xee
 80004e4:	701a      	strb	r2, [r3, #0]
		myString[i+1] = 0x00;
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	3301      	adds	r3, #1
 80004ea:	4a0f      	ldr	r2, [pc, #60]	; (8000528 <convert_data2str+0x5c>)
 80004ec:	2100      	movs	r1, #0
 80004ee:	54d1      	strb	r1, [r2, r3]
		int2chr(adc1_for_dma[j], &myString[i+2]);
 80004f0:	4a0e      	ldr	r2, [pc, #56]	; (800052c <convert_data2str+0x60>)
 80004f2:	683b      	ldr	r3, [r7, #0]
 80004f4:	f832 0013 	ldrh.w	r0, [r2, r3, lsl #1]
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	3302      	adds	r3, #2
 80004fc:	4a0a      	ldr	r2, [pc, #40]	; (8000528 <convert_data2str+0x5c>)
 80004fe:	4413      	add	r3, r2
 8000500:	4619      	mov	r1, r3
 8000502:	f7ff ffab 	bl	800045c <int2chr>
	for(uint32_t i = 0, j = 0; j < len; j++, i = i + 7){
 8000506:	683b      	ldr	r3, [r7, #0]
 8000508:	3301      	adds	r3, #1
 800050a:	603b      	str	r3, [r7, #0]
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	3307      	adds	r3, #7
 8000510:	607b      	str	r3, [r7, #4]
 8000512:	4b07      	ldr	r3, [pc, #28]	; (8000530 <convert_data2str+0x64>)
 8000514:	881b      	ldrh	r3, [r3, #0]
 8000516:	461a      	mov	r2, r3
 8000518:	683b      	ldr	r3, [r7, #0]
 800051a:	429a      	cmp	r2, r3
 800051c:	d8de      	bhi.n	80004dc <convert_data2str+0x10>
	}
}
 800051e:	bf00      	nop
 8000520:	3708      	adds	r7, #8
 8000522:	46bd      	mov	sp, r7
 8000524:	bd80      	pop	{r7, pc}
 8000526:	bf00      	nop
 8000528:	2000002c 	.word	0x2000002c
 800052c:	20001c2c 	.word	0x20001c2c
 8000530:	20000000 	.word	0x20000000

08000534 <dma1_init_for_adc1>:

void dma1_init_for_adc1(){
 8000534:	b580      	push	{r7, lr}
 8000536:	af00      	add	r7, sp, #0
	RCC->AHBENR |= RCC_AHBENR_DMA1EN;
 8000538:	4a13      	ldr	r2, [pc, #76]	; (8000588 <dma1_init_for_adc1+0x54>)
 800053a:	4b13      	ldr	r3, [pc, #76]	; (8000588 <dma1_init_for_adc1+0x54>)
 800053c:	695b      	ldr	r3, [r3, #20]
 800053e:	f043 0301 	orr.w	r3, r3, #1
 8000542:	6153      	str	r3, [r2, #20]
	DMA1_Channel1->CCR |= DMA_CCR_MINC | DMA_CCR_MSIZE_0 | DMA_CCR_PSIZE_0 | DMA_CCR_TCIE;
 8000544:	4a11      	ldr	r2, [pc, #68]	; (800058c <dma1_init_for_adc1+0x58>)
 8000546:	4b11      	ldr	r3, [pc, #68]	; (800058c <dma1_init_for_adc1+0x58>)
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	f443 63b0 	orr.w	r3, r3, #1408	; 0x580
 800054e:	f043 0302 	orr.w	r3, r3, #2
 8000552:	6013      	str	r3, [r2, #0]

	NVIC_SetPriority(DMA1_Channel1_IRQn, 0x01);
 8000554:	2101      	movs	r1, #1
 8000556:	200b      	movs	r0, #11
 8000558:	f7ff ff56 	bl	8000408 <NVIC_SetPriority>
	NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800055c:	200b      	movs	r0, #11
 800055e:	f7ff ff39 	bl	80003d4 <NVIC_EnableIRQ>

	ADC1->CFGR |= ADC_CFGR_DMACFG;
 8000562:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000566:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800056a:	68db      	ldr	r3, [r3, #12]
 800056c:	f043 0302 	orr.w	r3, r3, #2
 8000570:	60d3      	str	r3, [r2, #12]
	ADC1->CFGR |= ADC_CFGR_DMAEN;
 8000572:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000576:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800057a:	68db      	ldr	r3, [r3, #12]
 800057c:	f043 0301 	orr.w	r3, r3, #1
 8000580:	60d3      	str	r3, [r2, #12]
}
 8000582:	bf00      	nop
 8000584:	bd80      	pop	{r7, pc}
 8000586:	bf00      	nop
 8000588:	40021000 	.word	0x40021000
 800058c:	40020008 	.word	0x40020008

08000590 <dma1_init_for_usart2>:

void dma1_init_for_usart2(){
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
	RCC->AHBENR |= RCC_AHBENR_DMA1EN;
 8000594:	4a0a      	ldr	r2, [pc, #40]	; (80005c0 <dma1_init_for_usart2+0x30>)
 8000596:	4b0a      	ldr	r3, [pc, #40]	; (80005c0 <dma1_init_for_usart2+0x30>)
 8000598:	695b      	ldr	r3, [r3, #20]
 800059a:	f043 0301 	orr.w	r3, r3, #1
 800059e:	6153      	str	r3, [r2, #20]
	DMA1_Channel7->CCR |= DMA_CCR_MINC | DMA_CCR_DIR | DMA_CCR_TCIE;
 80005a0:	4a08      	ldr	r2, [pc, #32]	; (80005c4 <dma1_init_for_usart2+0x34>)
 80005a2:	4b08      	ldr	r3, [pc, #32]	; (80005c4 <dma1_init_for_usart2+0x34>)
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	f043 0392 	orr.w	r3, r3, #146	; 0x92
 80005aa:	6013      	str	r3, [r2, #0]

	NVIC_SetPriority(DMA1_Channel7_IRQn, 0x02);
 80005ac:	2102      	movs	r1, #2
 80005ae:	2011      	movs	r0, #17
 80005b0:	f7ff ff2a 	bl	8000408 <NVIC_SetPriority>
	NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80005b4:	2011      	movs	r0, #17
 80005b6:	f7ff ff0d 	bl	80003d4 <NVIC_EnableIRQ>

}
 80005ba:	bf00      	nop
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	bf00      	nop
 80005c0:	40021000 	.word	0x40021000
 80005c4:	40020080 	.word	0x40020080

080005c8 <dma1_ch1_en>:

void dma1_ch1_en(){
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0
	DMA1_Channel1->CCR &= ~DMA_CCR_EN;
 80005cc:	4a0d      	ldr	r2, [pc, #52]	; (8000604 <dma1_ch1_en+0x3c>)
 80005ce:	4b0d      	ldr	r3, [pc, #52]	; (8000604 <dma1_ch1_en+0x3c>)
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	f023 0301 	bic.w	r3, r3, #1
 80005d6:	6013      	str	r3, [r2, #0]
	DMA1_Channel1->CPAR = (uint32_t)&ADC1->DR;
 80005d8:	4b0a      	ldr	r3, [pc, #40]	; (8000604 <dma1_ch1_en+0x3c>)
 80005da:	4a0b      	ldr	r2, [pc, #44]	; (8000608 <dma1_ch1_en+0x40>)
 80005dc:	609a      	str	r2, [r3, #8]
	DMA1_Channel1->CMAR = (uint32_t)&adc1_for_dma;
 80005de:	4b09      	ldr	r3, [pc, #36]	; (8000604 <dma1_ch1_en+0x3c>)
 80005e0:	4a0a      	ldr	r2, [pc, #40]	; (800060c <dma1_ch1_en+0x44>)
 80005e2:	60da      	str	r2, [r3, #12]
	DMA1_Channel1->CNDTR = len;
 80005e4:	4b07      	ldr	r3, [pc, #28]	; (8000604 <dma1_ch1_en+0x3c>)
 80005e6:	4a0a      	ldr	r2, [pc, #40]	; (8000610 <dma1_ch1_en+0x48>)
 80005e8:	8812      	ldrh	r2, [r2, #0]
 80005ea:	605a      	str	r2, [r3, #4]
	DMA1_Channel1->CCR |= DMA_CCR_EN;
 80005ec:	4a05      	ldr	r2, [pc, #20]	; (8000604 <dma1_ch1_en+0x3c>)
 80005ee:	4b05      	ldr	r3, [pc, #20]	; (8000604 <dma1_ch1_en+0x3c>)
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	f043 0301 	orr.w	r3, r3, #1
 80005f6:	6013      	str	r3, [r2, #0]

}
 80005f8:	bf00      	nop
 80005fa:	46bd      	mov	sp, r7
 80005fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000600:	4770      	bx	lr
 8000602:	bf00      	nop
 8000604:	40020008 	.word	0x40020008
 8000608:	50000040 	.word	0x50000040
 800060c:	20001c2c 	.word	0x20001c2c
 8000610:	20000000 	.word	0x20000000

08000614 <dma1_ch7_en>:

void dma1_ch7_en(){
 8000614:	b480      	push	{r7}
 8000616:	af00      	add	r7, sp, #0
	DMA1_Channel7->CCR &= ~DMA_CCR_EN;
 8000618:	4a0f      	ldr	r2, [pc, #60]	; (8000658 <dma1_ch7_en+0x44>)
 800061a:	4b0f      	ldr	r3, [pc, #60]	; (8000658 <dma1_ch7_en+0x44>)
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	f023 0301 	bic.w	r3, r3, #1
 8000622:	6013      	str	r3, [r2, #0]
	DMA1_Channel7->CNDTR = len*7;
 8000624:	4a0c      	ldr	r2, [pc, #48]	; (8000658 <dma1_ch7_en+0x44>)
 8000626:	4b0d      	ldr	r3, [pc, #52]	; (800065c <dma1_ch7_en+0x48>)
 8000628:	881b      	ldrh	r3, [r3, #0]
 800062a:	4619      	mov	r1, r3
 800062c:	460b      	mov	r3, r1
 800062e:	00db      	lsls	r3, r3, #3
 8000630:	1a5b      	subs	r3, r3, r1
 8000632:	6053      	str	r3, [r2, #4]
	DMA1_Channel7->CPAR = (uint32_t)&USART2->TDR;
 8000634:	4b08      	ldr	r3, [pc, #32]	; (8000658 <dma1_ch7_en+0x44>)
 8000636:	4a0a      	ldr	r2, [pc, #40]	; (8000660 <dma1_ch7_en+0x4c>)
 8000638:	609a      	str	r2, [r3, #8]
	DMA1_Channel7->CMAR = (uint32_t)myString;
 800063a:	4b07      	ldr	r3, [pc, #28]	; (8000658 <dma1_ch7_en+0x44>)
 800063c:	4a09      	ldr	r2, [pc, #36]	; (8000664 <dma1_ch7_en+0x50>)
 800063e:	60da      	str	r2, [r3, #12]
	DMA1_Channel7->CCR |= DMA_CCR_EN;
 8000640:	4a05      	ldr	r2, [pc, #20]	; (8000658 <dma1_ch7_en+0x44>)
 8000642:	4b05      	ldr	r3, [pc, #20]	; (8000658 <dma1_ch7_en+0x44>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	f043 0301 	orr.w	r3, r3, #1
 800064a:	6013      	str	r3, [r2, #0]
}
 800064c:	bf00      	nop
 800064e:	46bd      	mov	sp, r7
 8000650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000654:	4770      	bx	lr
 8000656:	bf00      	nop
 8000658:	40020080 	.word	0x40020080
 800065c:	20000000 	.word	0x20000000
 8000660:	40004428 	.word	0x40004428
 8000664:	2000002c 	.word	0x2000002c

08000668 <gpioa_init>:
		buff[i] ='0' + a;
		num = num/10;
	}
	buff[4] = ' ';
}
void gpioa_init(){
 8000668:	b480      	push	{r7}
 800066a:	af00      	add	r7, sp, #0
	RCC->AHBENR |= RCC_AHBENR_GPIOAEN;
 800066c:	4a09      	ldr	r2, [pc, #36]	; (8000694 <gpioa_init+0x2c>)
 800066e:	4b09      	ldr	r3, [pc, #36]	; (8000694 <gpioa_init+0x2c>)
 8000670:	695b      	ldr	r3, [r3, #20]
 8000672:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000676:	6153      	str	r3, [r2, #20]
	GPIOA->MODER |= GPIO_MODER_MODER0;
 8000678:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800067c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	f043 0303 	orr.w	r3, r3, #3
 8000686:	6013      	str	r3, [r2, #0]
}
 8000688:	bf00      	nop
 800068a:	46bd      	mov	sp, r7
 800068c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop
 8000694:	40021000 	.word	0x40021000

08000698 <main>:
int main(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	af00      	add	r7, sp, #0
	gpioa_init();
 800069c:	f7ff ffe4 	bl	8000668 <gpioa_init>
	usart2_init();
 80006a0:	f000 f97c 	bl	800099c <usart2_init>
	adc_init();
 80006a4:	f7ff fe34 	bl	8000310 <adc_init>
	dma1_init_for_adc1();
 80006a8:	f7ff ff44 	bl	8000534 <dma1_init_for_adc1>
	dma1_init_for_usart2();
 80006ac:	f7ff ff70 	bl	8000590 <dma1_init_for_usart2>
	dma1_ch7_en();
 80006b0:	f7ff ffb0 	bl	8000614 <dma1_ch7_en>
	dma1_ch1_en();
 80006b4:	f7ff ff88 	bl	80005c8 <dma1_ch1_en>
 80006b8:	2300      	movs	r3, #0

}
 80006ba:	4618      	mov	r0, r3
 80006bc:	bd80      	pop	{r7, pc}

080006be <ADC1_2_IRQHandler>:
void ADC1_2_IRQHandler(){
 80006be:	b480      	push	{r7}
 80006c0:	af00      	add	r7, sp, #0

}
 80006c2:	bf00      	nop
 80006c4:	46bd      	mov	sp, r7
 80006c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ca:	4770      	bx	lr

080006cc <USART2_IRQHandler>:
void USART2_IRQHandler() {
 80006cc:	b480      	push	{r7}
 80006ce:	af00      	add	r7, sp, #0
	if (USART2->ISR & USART_ISR_RXNE) {
 80006d0:	4b06      	ldr	r3, [pc, #24]	; (80006ec <USART2_IRQHandler+0x20>)
 80006d2:	69db      	ldr	r3, [r3, #28]
 80006d4:	f003 0320 	and.w	r3, r3, #32
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <USART2_IRQHandler+0x14>
	        if(USART2->RDR == 0xEE){
 80006dc:	4b03      	ldr	r3, [pc, #12]	; (80006ec <USART2_IRQHandler+0x20>)
 80006de:	8c9b      	ldrh	r3, [r3, #36]	; 0x24

	        }
	 }
}
 80006e0:	bf00      	nop
 80006e2:	46bd      	mov	sp, r7
 80006e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e8:	4770      	bx	lr
 80006ea:	bf00      	nop
 80006ec:	40004400 	.word	0x40004400

080006f0 <DMA1_Channel7_IRQHandler>:

void DMA1_Channel7_IRQHandler(){
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0
	if(DMA1->ISR & DMA_ISR_TCIF7){
 80006f4:	4b0a      	ldr	r3, [pc, #40]	; (8000720 <DMA1_Channel7_IRQHandler+0x30>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d00c      	beq.n	800071a <DMA1_Channel7_IRQHandler+0x2a>
		DMA1->IFCR |= DMA_IFCR_CTCIF7;
 8000700:	4a07      	ldr	r2, [pc, #28]	; (8000720 <DMA1_Channel7_IRQHandler+0x30>)
 8000702:	4b07      	ldr	r3, [pc, #28]	; (8000720 <DMA1_Channel7_IRQHandler+0x30>)
 8000704:	685b      	ldr	r3, [r3, #4]
 8000706:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800070a:	6053      	str	r3, [r2, #4]
		delay(pause);
 800070c:	4b05      	ldr	r3, [pc, #20]	; (8000724 <DMA1_Channel7_IRQHandler+0x34>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	4618      	mov	r0, r3
 8000712:	f7ff fdab 	bl	800026c <delay>
		dma1_ch7_en();
 8000716:	f7ff ff7d 	bl	8000614 <dma1_ch7_en>

	}
}
 800071a:	bf00      	nop
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	40020000 	.word	0x40020000
 8000724:	20000004 	.word	0x20000004

08000728 <DMA1_Channel1_IRQHandler>:

void DMA1_Channel1_IRQHandler(){
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0
	if(DMA1->ISR & DMA_ISR_TCIF1){
 800072c:	4b08      	ldr	r3, [pc, #32]	; (8000750 <DMA1_Channel1_IRQHandler+0x28>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	f003 0302 	and.w	r3, r3, #2
 8000734:	2b00      	cmp	r3, #0
 8000736:	d009      	beq.n	800074c <DMA1_Channel1_IRQHandler+0x24>
		DMA1->IFCR |= DMA_IFCR_CTCIF1;
 8000738:	4a05      	ldr	r2, [pc, #20]	; (8000750 <DMA1_Channel1_IRQHandler+0x28>)
 800073a:	4b05      	ldr	r3, [pc, #20]	; (8000750 <DMA1_Channel1_IRQHandler+0x28>)
 800073c:	685b      	ldr	r3, [r3, #4]
 800073e:	f043 0302 	orr.w	r3, r3, #2
 8000742:	6053      	str	r3, [r2, #4]
		convert_data2str();
 8000744:	f7ff fec2 	bl	80004cc <convert_data2str>
		dma1_ch1_en();
 8000748:	f7ff ff3e 	bl	80005c8 <dma1_ch1_en>

	}
}
 800074c:	bf00      	nop
 800074e:	bd80      	pop	{r7, pc}
 8000750:	40020000 	.word	0x40020000

08000754 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000754:	f8df d034 	ldr.w	sp, [pc, #52]	; 800078c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000758:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800075a:	e003      	b.n	8000764 <LoopCopyDataInit>

0800075c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800075c:	4b0c      	ldr	r3, [pc, #48]	; (8000790 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800075e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000760:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000762:	3104      	adds	r1, #4

08000764 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000764:	480b      	ldr	r0, [pc, #44]	; (8000794 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000766:	4b0c      	ldr	r3, [pc, #48]	; (8000798 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000768:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800076a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800076c:	d3f6      	bcc.n	800075c <CopyDataInit>
	ldr	r2, =_sbss
 800076e:	4a0b      	ldr	r2, [pc, #44]	; (800079c <LoopForever+0x12>)
	b	LoopFillZerobss
 8000770:	e002      	b.n	8000778 <LoopFillZerobss>

08000772 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000772:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000774:	f842 3b04 	str.w	r3, [r2], #4

08000778 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000778:	4b09      	ldr	r3, [pc, #36]	; (80007a0 <LoopForever+0x16>)
	cmp	r2, r3
 800077a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800077c:	d3f9      	bcc.n	8000772 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800077e:	f000 f841 	bl	8000804 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000782:	f000 f945 	bl	8000a10 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000786:	f7ff ff87 	bl	8000698 <main>

0800078a <LoopForever>:

LoopForever:
    b LoopForever
 800078a:	e7fe      	b.n	800078a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800078c:	2000a000 	.word	0x2000a000
	ldr	r3, =_sidata
 8000790:	08000a78 	.word	0x08000a78
	ldr	r0, =_sdata
 8000794:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000798:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 800079c:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 80007a0:	2000242c 	.word	0x2000242c

080007a4 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80007a4:	e7fe      	b.n	80007a4 <ADC3_IRQHandler>

080007a6 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 80007a6:	b480      	push	{r7}
 80007a8:	af00      	add	r7, sp, #0
}
 80007aa:	bf00      	nop
 80007ac:	46bd      	mov	sp, r7
 80007ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b2:	4770      	bx	lr

080007b4 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80007b4:	b480      	push	{r7}
 80007b6:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 80007b8:	e7fe      	b.n	80007b8 <HardFault_Handler+0x4>

080007ba <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 80007ba:	b480      	push	{r7}
 80007bc:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 80007be:	e7fe      	b.n	80007be <MemManage_Handler+0x4>

080007c0 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80007c0:	b480      	push	{r7}
 80007c2:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 80007c4:	e7fe      	b.n	80007c4 <BusFault_Handler+0x4>

080007c6 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 80007c6:	b480      	push	{r7}
 80007c8:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 80007ca:	e7fe      	b.n	80007ca <UsageFault_Handler+0x4>

080007cc <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 80007cc:	b480      	push	{r7}
 80007ce:	af00      	add	r7, sp, #0
}
 80007d0:	bf00      	nop
 80007d2:	46bd      	mov	sp, r7
 80007d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d8:	4770      	bx	lr

080007da <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 80007da:	b480      	push	{r7}
 80007dc:	af00      	add	r7, sp, #0
}
 80007de:	bf00      	nop
 80007e0:	46bd      	mov	sp, r7
 80007e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e6:	4770      	bx	lr

080007e8 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 80007e8:	b480      	push	{r7}
 80007ea:	af00      	add	r7, sp, #0
}
 80007ec:	bf00      	nop
 80007ee:	46bd      	mov	sp, r7
 80007f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f4:	4770      	bx	lr

080007f6 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 80007f6:	b580      	push	{r7, lr}
 80007f8:	af00      	add	r7, sp, #0
  HAL_IncTick();
 80007fa:	f7ff fce5 	bl	80001c8 <HAL_IncTick>
}
 80007fe:	bf00      	nop
 8000800:	bd80      	pop	{r7, pc}
	...

08000804 <SystemInit>:
  *         Initialize the FPU setting, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000804:	b480      	push	{r7}
 8000806:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000808:	4a1f      	ldr	r2, [pc, #124]	; (8000888 <SystemInit+0x84>)
 800080a:	4b1f      	ldr	r3, [pc, #124]	; (8000888 <SystemInit+0x84>)
 800080c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000810:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000814:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000818:	4a1c      	ldr	r2, [pc, #112]	; (800088c <SystemInit+0x88>)
 800081a:	4b1c      	ldr	r3, [pc, #112]	; (800088c <SystemInit+0x88>)
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	f043 0301 	orr.w	r3, r3, #1
 8000822:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00C;
 8000824:	4919      	ldr	r1, [pc, #100]	; (800088c <SystemInit+0x88>)
 8000826:	4b19      	ldr	r3, [pc, #100]	; (800088c <SystemInit+0x88>)
 8000828:	685a      	ldr	r2, [r3, #4]
 800082a:	4b19      	ldr	r3, [pc, #100]	; (8000890 <SystemInit+0x8c>)
 800082c:	4013      	ands	r3, r2
 800082e:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000830:	4a16      	ldr	r2, [pc, #88]	; (800088c <SystemInit+0x88>)
 8000832:	4b16      	ldr	r3, [pc, #88]	; (800088c <SystemInit+0x88>)
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800083a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800083e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000840:	4a12      	ldr	r2, [pc, #72]	; (800088c <SystemInit+0x88>)
 8000842:	4b12      	ldr	r3, [pc, #72]	; (800088c <SystemInit+0x88>)
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800084a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 800084c:	4a0f      	ldr	r2, [pc, #60]	; (800088c <SystemInit+0x88>)
 800084e:	4b0f      	ldr	r3, [pc, #60]	; (800088c <SystemInit+0x88>)
 8000850:	685b      	ldr	r3, [r3, #4]
 8000852:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8000856:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 8000858:	4a0c      	ldr	r2, [pc, #48]	; (800088c <SystemInit+0x88>)
 800085a:	4b0c      	ldr	r3, [pc, #48]	; (800088c <SystemInit+0x88>)
 800085c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800085e:	f023 030f 	bic.w	r3, r3, #15
 8000862:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= (uint32_t)0xFF00FCCC;
 8000864:	4909      	ldr	r1, [pc, #36]	; (800088c <SystemInit+0x88>)
 8000866:	4b09      	ldr	r3, [pc, #36]	; (800088c <SystemInit+0x88>)
 8000868:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800086a:	4b0a      	ldr	r3, [pc, #40]	; (8000894 <SystemInit+0x90>)
 800086c:	4013      	ands	r3, r2
 800086e:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000870:	4b06      	ldr	r3, [pc, #24]	; (800088c <SystemInit+0x88>)
 8000872:	2200      	movs	r2, #0
 8000874:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000876:	4b04      	ldr	r3, [pc, #16]	; (8000888 <SystemInit+0x84>)
 8000878:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800087c:	609a      	str	r2, [r3, #8]
#endif
}
 800087e:	bf00      	nop
 8000880:	46bd      	mov	sp, r7
 8000882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000886:	4770      	bx	lr
 8000888:	e000ed00 	.word	0xe000ed00
 800088c:	40021000 	.word	0x40021000
 8000890:	f87fc00c 	.word	0xf87fc00c
 8000894:	ff00fccc 	.word	0xff00fccc

08000898 <NVIC_EnableIRQ>:
{
 8000898:	b480      	push	{r7}
 800089a:	b083      	sub	sp, #12
 800089c:	af00      	add	r7, sp, #0
 800089e:	4603      	mov	r3, r0
 80008a0:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 80008a2:	4909      	ldr	r1, [pc, #36]	; (80008c8 <NVIC_EnableIRQ+0x30>)
 80008a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008a8:	095b      	lsrs	r3, r3, #5
 80008aa:	79fa      	ldrb	r2, [r7, #7]
 80008ac:	f002 021f 	and.w	r2, r2, #31
 80008b0:	2001      	movs	r0, #1
 80008b2:	fa00 f202 	lsl.w	r2, r0, r2
 80008b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80008ba:	bf00      	nop
 80008bc:	370c      	adds	r7, #12
 80008be:	46bd      	mov	sp, r7
 80008c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c4:	4770      	bx	lr
 80008c6:	bf00      	nop
 80008c8:	e000e100 	.word	0xe000e100

080008cc <NVIC_SetPriority>:
{
 80008cc:	b480      	push	{r7}
 80008ce:	b083      	sub	sp, #12
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	4603      	mov	r3, r0
 80008d4:	6039      	str	r1, [r7, #0]
 80008d6:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 80008d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008dc:	2b00      	cmp	r3, #0
 80008de:	da0b      	bge.n	80008f8 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 80008e0:	490d      	ldr	r1, [pc, #52]	; (8000918 <NVIC_SetPriority+0x4c>)
 80008e2:	79fb      	ldrb	r3, [r7, #7]
 80008e4:	f003 030f 	and.w	r3, r3, #15
 80008e8:	3b04      	subs	r3, #4
 80008ea:	683a      	ldr	r2, [r7, #0]
 80008ec:	b2d2      	uxtb	r2, r2
 80008ee:	0112      	lsls	r2, r2, #4
 80008f0:	b2d2      	uxtb	r2, r2
 80008f2:	440b      	add	r3, r1
 80008f4:	761a      	strb	r2, [r3, #24]
}
 80008f6:	e009      	b.n	800090c <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 80008f8:	4908      	ldr	r1, [pc, #32]	; (800091c <NVIC_SetPriority+0x50>)
 80008fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008fe:	683a      	ldr	r2, [r7, #0]
 8000900:	b2d2      	uxtb	r2, r2
 8000902:	0112      	lsls	r2, r2, #4
 8000904:	b2d2      	uxtb	r2, r2
 8000906:	440b      	add	r3, r1
 8000908:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800090c:	bf00      	nop
 800090e:	370c      	adds	r7, #12
 8000910:	46bd      	mov	sp, r7
 8000912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000916:	4770      	bx	lr
 8000918:	e000ed00 	.word	0xe000ed00
 800091c:	e000e100 	.word	0xe000e100

08000920 <usart2_gpio_init>:
#include "usart.h"

void usart2_gpio_init(){
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0
	RCC->AHBENR|= RCC_AHBENR_GPIOAEN;
 8000924:	4a1c      	ldr	r2, [pc, #112]	; (8000998 <usart2_gpio_init+0x78>)
 8000926:	4b1c      	ldr	r3, [pc, #112]	; (8000998 <usart2_gpio_init+0x78>)
 8000928:	695b      	ldr	r3, [r3, #20]
 800092a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800092e:	6153      	str	r3, [r2, #20]
	RCC->APB1ENR|= RCC_APB1ENR_USART2EN;
 8000930:	4a19      	ldr	r2, [pc, #100]	; (8000998 <usart2_gpio_init+0x78>)
 8000932:	4b19      	ldr	r3, [pc, #100]	; (8000998 <usart2_gpio_init+0x78>)
 8000934:	69db      	ldr	r3, [r3, #28]
 8000936:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800093a:	61d3      	str	r3, [r2, #28]
	GPIOA->MODER |= GPIO_MODER_MODER2_1 | GPIO_MODER_MODER3_1;
 800093c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000940:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 800094a:	6013      	str	r3, [r2, #0]
	GPIOA->AFR[0] &= ~(0xF << (4 * 2));
 800094c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000950:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000954:	6a1b      	ldr	r3, [r3, #32]
 8000956:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800095a:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &= ~(0xF << (4 *3));
 800095c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000960:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000964:	6a1b      	ldr	r3, [r3, #32]
 8000966:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800096a:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=  (7 << (4 * 2));
 800096c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000970:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000974:	6a1b      	ldr	r3, [r3, #32]
 8000976:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800097a:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=  (7 << (4 * 3));
 800097c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000980:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000984:	6a1b      	ldr	r3, [r3, #32]
 8000986:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 800098a:	6213      	str	r3, [r2, #32]
}
 800098c:	bf00      	nop
 800098e:	46bd      	mov	sp, r7
 8000990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000994:	4770      	bx	lr
 8000996:	bf00      	nop
 8000998:	40021000 	.word	0x40021000

0800099c <usart2_init>:

void usart2_init(){
 800099c:	b580      	push	{r7, lr}
 800099e:	af00      	add	r7, sp, #0

	usart2_gpio_init();
 80009a0:	f7ff ffbe 	bl	8000920 <usart2_gpio_init>

	USART2->CR1 &= ~USART_CR1_M;
 80009a4:	4a17      	ldr	r2, [pc, #92]	; (8000a04 <usart2_init+0x68>)
 80009a6:	4b17      	ldr	r3, [pc, #92]	; (8000a04 <usart2_init+0x68>)
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80009ae:	6013      	str	r3, [r2, #0]

	USART2->BRR = SystemCoreClock / 115200;
 80009b0:	4a14      	ldr	r2, [pc, #80]	; (8000a04 <usart2_init+0x68>)
 80009b2:	4b15      	ldr	r3, [pc, #84]	; (8000a08 <usart2_init+0x6c>)
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	4915      	ldr	r1, [pc, #84]	; (8000a0c <usart2_init+0x70>)
 80009b8:	fba1 1303 	umull	r1, r3, r1, r3
 80009bc:	0c1b      	lsrs	r3, r3, #16
 80009be:	60d3      	str	r3, [r2, #12]

	USART2->CR2 &= ~USART_CR2_STOP;
 80009c0:	4a10      	ldr	r2, [pc, #64]	; (8000a04 <usart2_init+0x68>)
 80009c2:	4b10      	ldr	r3, [pc, #64]	; (8000a04 <usart2_init+0x68>)
 80009c4:	685b      	ldr	r3, [r3, #4]
 80009c6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80009ca:	6053      	str	r3, [r2, #4]

	USART2->CR1 |= USART_CR1_UE|USART_CR1_TE|USART_CR1_RE;
 80009cc:	4a0d      	ldr	r2, [pc, #52]	; (8000a04 <usart2_init+0x68>)
 80009ce:	4b0d      	ldr	r3, [pc, #52]	; (8000a04 <usart2_init+0x68>)
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	f043 030d 	orr.w	r3, r3, #13
 80009d6:	6013      	str	r3, [r2, #0]

	USART2->CR1 |= USART_CR1_RXNEIE;
 80009d8:	4a0a      	ldr	r2, [pc, #40]	; (8000a04 <usart2_init+0x68>)
 80009da:	4b0a      	ldr	r3, [pc, #40]	; (8000a04 <usart2_init+0x68>)
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	f043 0320 	orr.w	r3, r3, #32
 80009e2:	6013      	str	r3, [r2, #0]

	USART2->CR3 |= USART_CR3_DMAT;
 80009e4:	4a07      	ldr	r2, [pc, #28]	; (8000a04 <usart2_init+0x68>)
 80009e6:	4b07      	ldr	r3, [pc, #28]	; (8000a04 <usart2_init+0x68>)
 80009e8:	689b      	ldr	r3, [r3, #8]
 80009ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009ee:	6093      	str	r3, [r2, #8]

	NVIC_SetPriority(USART2_IRQn, 0x03);
 80009f0:	2103      	movs	r1, #3
 80009f2:	2026      	movs	r0, #38	; 0x26
 80009f4:	f7ff ff6a 	bl	80008cc <NVIC_SetPriority>
	NVIC_EnableIRQ(USART2_IRQn);
 80009f8:	2026      	movs	r0, #38	; 0x26
 80009fa:	f7ff ff4d 	bl	8000898 <NVIC_EnableIRQ>


}
 80009fe:	bf00      	nop
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	40004400 	.word	0x40004400
 8000a08:	20000008 	.word	0x20000008
 8000a0c:	91a2b3c5 	.word	0x91a2b3c5

08000a10 <__libc_init_array>:
 8000a10:	b570      	push	{r4, r5, r6, lr}
 8000a12:	4e0d      	ldr	r6, [pc, #52]	; (8000a48 <__libc_init_array+0x38>)
 8000a14:	4c0d      	ldr	r4, [pc, #52]	; (8000a4c <__libc_init_array+0x3c>)
 8000a16:	1ba4      	subs	r4, r4, r6
 8000a18:	10a4      	asrs	r4, r4, #2
 8000a1a:	2500      	movs	r5, #0
 8000a1c:	42a5      	cmp	r5, r4
 8000a1e:	d109      	bne.n	8000a34 <__libc_init_array+0x24>
 8000a20:	4e0b      	ldr	r6, [pc, #44]	; (8000a50 <__libc_init_array+0x40>)
 8000a22:	4c0c      	ldr	r4, [pc, #48]	; (8000a54 <__libc_init_array+0x44>)
 8000a24:	f000 f818 	bl	8000a58 <_init>
 8000a28:	1ba4      	subs	r4, r4, r6
 8000a2a:	10a4      	asrs	r4, r4, #2
 8000a2c:	2500      	movs	r5, #0
 8000a2e:	42a5      	cmp	r5, r4
 8000a30:	d105      	bne.n	8000a3e <__libc_init_array+0x2e>
 8000a32:	bd70      	pop	{r4, r5, r6, pc}
 8000a34:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000a38:	4798      	blx	r3
 8000a3a:	3501      	adds	r5, #1
 8000a3c:	e7ee      	b.n	8000a1c <__libc_init_array+0xc>
 8000a3e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000a42:	4798      	blx	r3
 8000a44:	3501      	adds	r5, #1
 8000a46:	e7f2      	b.n	8000a2e <__libc_init_array+0x1e>
 8000a48:	08000a70 	.word	0x08000a70
 8000a4c:	08000a70 	.word	0x08000a70
 8000a50:	08000a70 	.word	0x08000a70
 8000a54:	08000a74 	.word	0x08000a74

08000a58 <_init>:
 8000a58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a5a:	bf00      	nop
 8000a5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a5e:	bc08      	pop	{r3}
 8000a60:	469e      	mov	lr, r3
 8000a62:	4770      	bx	lr

08000a64 <_fini>:
 8000a64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a66:	bf00      	nop
 8000a68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a6a:	bc08      	pop	{r3}
 8000a6c:	469e      	mov	lr, r3
 8000a6e:	4770      	bx	lr
